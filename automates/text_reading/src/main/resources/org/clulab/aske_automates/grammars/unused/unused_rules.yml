###ENTITIES###


#  - name: var_is_defined
#    label: Variable
#    priority: ${priority}
#    type: token
#    example: "E0 is calculated as the product of Kcd and ETpm."
#    pattern: |
#      @Concept (?= [lemma = "be"] /correlated|defined|calculated|obtained/ /with|as|from/)
#
#  - name: var_calculate
#    label: Variable
#    priority: ${priority}
#    type: token
#    example: "The approach uses model-simulated LAI to calculate the Kcb."
#    pattern: |
#      (?<= calculate) @Concept

#  - name: var_indices
#    label: Variable
#    priority: ${priority}
#    type: token
#    example: "where locations are indexed by i, observational periods are indexed by t, b is the parameter of interest, and ∈ is the error."
#    pattern: |
#      (?<= indexed by) @Concept


# - name: var_verb
#   label: Variable
#   priority: 4
#   type: dependency
#   example: "The approach uses model-simulated LAI to calculate the Kcb. E0 is calculated as the product of Kcd and ETpm."
#   pattern: |
#     trigger = [lemma=/calculate|define/]
#     Variable:Concept+ = (dobj | nsubjpass) appos?
#     #NB!Not good for "Crop coefficients (Kcs) are calculated for the current Penman-Monteith ET approach in DSSAT-CSM as:"


# - name: where-value_is
#   label: Variable
#   priority: 2
#   type: token
#   pattern: |
#     (?<=where) @Concept (?=is)


###DEFINITIONS###


#  - name: var_from_appendix #todo need the engine manager for long sentences where this rule can work
#    label: Definition
#    priority: ${priority}
#    type: token
#    example: "We achieve the above by learning the transformation matrix as follows: W = UtBU ⊤ s , where Ut and Us are the orthogonal transformations for target and source language embeddings, respectively, and B is a positive definite matrix representing the Mahalanobis metric."
#    pattern: |
#      @variable:Variable (?<definition> [word = /.*/ & !word="-LRB-"]+)
#      #@variable:Variable (?<defintion> [word = /.*/] (@Concept[!word="-LRB-" & !tag=/^VB/])+)


#todo changing the var_def_appos_bidir rule to a dependency version seemed to help with some cases, but broke downstream; would like to revisit
#  - name: var_def_appos_bidir_dep
#    label: Definition
#    priority: ${priority}
#    type: dependency
#    example: "DSSAT-CSM employs the following formula for calculation of E0 (potential crop ET):"
#    action: selectShorterAsVariable
#    pattern: |
#      trigger = [word="-LRB-"]
#      c1:Concept = <punct
#      c2:Concept = <punct <appos



#  - name: var_definition_appos
#    label: Definition
#    priority: ${priority}
#    type: token
#    example: "DSSAT-CSM employs the following formula for calculation of E0 (potential crop ET):"
#    #action: variableArguments
#    pattern: |
#        @variable:Variable "-LRB-" @definition:Concept "-RRB-"


###VALUES###

#  - name: var-more_than_symbol
#    label: ParameterSetting
#    priority: ${priority}
#    type: token
#    #action: variableArguments
#    example: "but simulated yield decreased rapidly for Kcbmax > 1.15 (fig. 6a)."
#    pattern: |
#      (?<variable> [word = /.*/ & !tag="CD"]) ">" (value:Value [tag = "CD"])




#  - name: var-less_than_symbol
#    label: ParameterSetting
#    priority: ${priority}
#    type: dependency
#    #action: variableArguments
#    example: "but simulated yield decreased rapidly for Kcbmax < 1.15 (fig. 6a)."
#    pattern: |
#      (?<variable> [word = /.*/ & !tag="CD"]) "<" (value:Value [tag = "CD"])

#substituted this rule with a dependency one
#  - name: var_equals_def #needed bc of bad parse
#    label: Definition
#    priority: ${priority}
#    type: token
#    example: "T = daily mean air temperature [°C]"
#    #action: variableArguments
#    pattern: |
#      (?<variable> [word = /.*/]{1}) (?<trigger> [word = "=" ]) (an|a|the)? (?! [tag=CD]) @definition:Concept


### FUNCTIONS ###

# rules subsumed under generalized function rules

#  - name: product_of
#    label: Function
#    priority: ${priority}
#    type: dependency
#    action: ${action}
#    example: "Similar to equation 2, E0 is calculated as the product of Kcd and ETpm."
#    pattern: |
#      trigger = [word = "product"] (?="of")
#      input:Phrase+ = nmod_of conj_and?
#      output:Phrase = (nsubj | <nmod_as nsubjpass)

#  - name: inverse_of
#    label: Function
#    priority: ${priority}
#    type: dependency
#    action: ${action}
#    example: "γ is the inverse of the mean recovery time, in days."
#    pattern: |
#      trigger = [word = "inverse"] (?="of")
#      input:Phrase = nmod_of
#      output:Phrase = (nsubj | <nsubj ccomp nummod)

#  - name: sum_of
#    label: Function
#    priority: ${priority}
#    type: dependency
#    action: ${action}
#    example: "The incubation period (the time from first infection to the appearances of symptoms) plus the onset to admission interval is equal to the sum of the latent period and the infectious period and is therefore equal to 1/b + 1/a."
#    pattern: |
#      trigger = [word = "sum"] (?="of")
#      input:Phrase+ = nmod_of | (nmod_of)? conj_and
#      output:Phrase = ((<nmod_to)? nsubj | <nmod_as dobj)

#  - name: mean_of
#    label: Function
#    priority: ${priority}
#    type: dependency
#    action: ${action}
#    example: "the mean air temperature, T, for a daily time step is preferred as the mean of the daily maximum and daily minimum air temperatures..."
#    pattern: |
#      trigger = [word = "mean"] (?="of")
#      input:Phrase+ = nmod_of | nmod_of conj_and
#      output:Phrase = <nmod_as nsubjpass

#  - name: composite_of
#    label: Function
#    priority: ${priority}
#    type: dependency
#    action: ${action}
#    example: "two-source E models have been proposed which treat total E as a composite of vegetation transpiration and soil evaporation"
#    pattern: |
#      trigger = [lemma = "composite"] (?="of")
#      input:Phrase+ = nmod_of | nmod_of conj_and
#      output:Phrase = <nmod_as dobj

#  - name: minimum_or_maximum_of
#    label: Function
#    priority: ${priority}
#    type: dependency
#    action: ${action}
#    example: "Actual soil evaporation is the minimum of the potential and soil-limiting calculations on a daily basis."
#    pattern: |
#      trigger = [lemma = "minimum"] (?="of") | [lemma = "maximum"] (?="of")
#      input:Phrase+ = nmod_of | conj_and
#      output:Phrase = nsubj | <nmod_as nsubjpass

#  - name: function_of
#    label: Function
#    priority: ${priority}
#    type: dependency
#    action: ${action}
#    example: "Daily Rso is a function of the time of year and latitude."
#    pattern: |
#      trigger = [word = "function"] (?="of")
#      input:Phrase+ = nmod_of | nmod_of (nmod_of)? conj_and
#      output:Phrase = (csubj)? nsubj | <nmod_as (nsubjpass)?

#  - name: governed_by
#    label: Function
#    priority: ${priority}
#    type: dependency
#    action: ${action}
#    example: "Rate of development is governed by thermal time, or growing degree-days (GDD), which is computed based on the daily maximum and minimum temperatures."
#    pattern: |
#      trigger = [lemma = "govern"] (?= "by")
#      input:Phrase+ = nmod_agent
#      output:Phrase = nsubjpass

#  - name: modified_by
#    label: Function
#    priority: ${priority}
#    type: dependency
#    action: ${action}
#    example: "Daily growth rate is modified by temperature and assimilate availability."
#    pattern: |
#      trigger = [lemma = "modify"] (?= "by")
#      input:Phrase+ = nmod_agent | conj_and
#      output:Phrase = nsubjpass

#  - name: estimated_from
#    label: Function
#    priority: ${priority}
#    type: dependency
#    action: ${action}
#    example: "G for monthly periods in MJ m-2 d-1 is estimated from the change in mean monthly air temperature"
#    pattern: |
#      trigger = [lemma = "estimate"]
#      input:Phrase = nmod_from | xcomp dobj
#      output:Phrase = nsubjpass

#  - name: calculate
#    label: Function
#    priority: ${priority}
#    type: dependency
#    action: ${action}
#    example: "The actual vapor pressure of air for hourly periods can be calculated from relative humidity (RH) and saturation vapor pressure at the corresponding air temperature (from Eq. 37):"
#    pattern: |
#      trigger = [lemma = "calculate"]
#      input:Phrase+ = nmod_from | nmod_from conj_and | advcl_based_on | nsubj:xsubj
#      output:Phrase = nsubjpass | dobj

#  - name: determined_from
#    label: Function
#    priority: ${priority}
#    type: dependency
#    action: ${action}
#    example: "ETc can be determined from ETo using a crop specific coefficient (Kc)."
#    pattern: |
#      trigger = [lemma = "determine"]
#      input:Phrase+ = nmod_from
#      output:Phrase = nsubjpass

#  - name: fraction_of
#    label: Function
#    priority: ${priority}
#    type: dependency
#    action: ${action}
#    example: "where fG is fraction of G to Rns, with a value of 0.35 obtained by the observed G and calculated Rns for this study, which was similar with Choudhury et al. (1987) in a wheat field."
#    pattern: |
#      trigger = [lemma = "fraction"] (?="of")
#      input:Phrase+ = nmod_of | nmod_to
#      output:Phrase = nsubj

#  - name: ratio_of
#    label: Function
#    priority: ${priority}
#    type: dependency
#    action: ${action}
#    example: "β is the soil water retention function, defined as the ratio of available soil water content (W−Wp) to Mawc (i.e., Wc−Wp)"
#    pattern: |
#      trigger = [lemma = "ratio"] (?="of")
#      input:Phrase+ = nmod_of | (nmod_at)? nmod_to
#      output:Phrase = <nmod_as <acl nsubj | nsubj acl_to dobj