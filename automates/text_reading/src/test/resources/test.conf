TextEngine {

  basePath = /org/clulab/aske_automates
  masterRulesPath = ${TextEngine.basePath}/grammars/master.yml
  entityRulesPath = ${TextEngine.basePath}/grammars/entities/grammar/entities.yml
  avoidRulesPath = ${TextEngine.basePath}/grammars/avoidLocal.yml
  taxonomyPath = ${TextEngine.basePath}/grammars/taxonomy.yml


//  documentFilter = "length"
  EdgeCaseParagraphPreprocessor = false //should be off for tests because we know what type of text each test is---it's just text, not an edge case, e.g., table of contents in a paper (which would need to be processed like a comment
  enableExpansion = true
  validArgs = ["description"] #which args are to be expanded
  freqWordsPath = "./src/main/resources/frequentWords.tsv"

  entityFinder {
    enabled = true
    finderTypes = ["rulebased", "gazetteer"]

    // Rule-based
    entityRulesPath = ${TextEngine.basePath}/grammars/entities/grammar/entities.yml
    avoidRulesPath = ${TextEngine.basePath}/grammars/entities/grammar/avoid.yml
    maxHops = 15

    // grobid-quantities
    taxonomy = ${TextEngine.taxonomyPath}
    domain = "localhost"
    port = "8060"

    // Gazetteer
    lexicons = ["unit.tsv", "GreekLetter.tsv"]
  }


}

CommentEngine {
//  basePath = /org/clulab/aske_automates
  masterRulesPath = ${TextEngine.basePath}/grammars/comments/master.yml
  taxonomyPath = ${TextEngine.taxonomyPath}

  enableLexiconNER = true
  enableExpansion = false
  validArgs = ["description"] #which args are to be expanded
  freqWordsPath = "./src/main/resources/frequentWords.tsv"
  EdgeCaseParagraphPreprocessor = false
  documentFilter = "length"

  entityFinder {
    enabled = true
    finderTypes = []

    // GrFN-based string match
    grfnFile = ${apps.grfnFile}

  }
}

apps {
  grfnFile = "./input/grfn/petpt_grfn.json"

//  inputDirectory = "../development_data/ASCE_PT_model_papers_jsons"
  inputDirectory = "./input/petpt/text"
  inputType = "json"

  numAlignments = 3

  outputDirectory = "./output/petpt"
  exportAs = ["serialized", "json"] // no other formats yet specified, but can be added!
}

alignment {
  alignerType = "pairwisew2v"
  w2vPath = ""
  relevantArgs = ["description"]
}
