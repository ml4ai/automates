# coding: utf-8

"""
    Grounded Model Exchange (GroMEt) schema for Function Networks

    This document defines the GroMEt Function Network data model. Note that Metadata is defined in separate spec.  __Using Swagger to Generate Class Structure__  To automatically generate Python or Java models corresponding to this document, you can use [swagger-codegen](https://swagger.io/tools/swagger-codegen/). This can be used to generate the client code based off of this spec, and in the process this will generate the data model class structure.  1. Install via the method described for your operating system    [here](https://github.com/swagger-api/swagger-codegen#Prerequisites).    Make sure to install a version after 3.0 that will support openapi 3. 2. Run swagger-codegen with the options in the example below.    The URL references where the yaml for this documentation is stored on    github. Make sure to replace CURRENT_VERSION with the correct version.    (The current version is `0.1.4`.)    To generate Java classes rather, change the `-l python` to `-l java`.    Change the value to the `-o` option to the desired output location.    ```    swagger-codegen generate -l python -o ./client -i https://raw.githubusercontent.com/ml4ai/automates-v2/master/docs/source/gromet_FN_v{CURRENT_VERSION}.yaml    ``` 3. Once it executes, the client code will be generated at your specified    location.    For python, the classes will be located in    `$OUTPUT_PATH/swagger_client/models/`.    For java, they will be located in    `$OUTPUT_PATH/src/main/java/io/swagger/client/model/`  If generating GroMEt schema data model classes in SKEMA (AutoMATES), then after generating the above, follow the instructions here: ``` <automates>/automates/model_assembly/gromet/model/README.md ```   # noqa: E501

    OpenAPI spec version: 0.1.5
    Contact: claytonm@arizona.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from automates.gromet.fn.gromet_object import GrometObject  # noqa: F401,E501

class GrometFNModuleCollection(GrometObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schema': 'str',
        'schema_version': 'str',
        'name': 'str',
        'modules': 'list[GrometFNModule]',
        'module_index': 'list[str]',
        'executables': 'list[int]'
    }
    if hasattr(GrometObject, "swagger_types"):
        swagger_types.update(GrometObject.swagger_types)

    attribute_map = {
        'schema': 'schema',
        'schema_version': 'schema_version',
        'name': 'name',
        'modules': 'modules',
        'module_index': 'module_index',
        'executables': 'executables'
    }
    if hasattr(GrometObject, "attribute_map"):
        attribute_map.update(GrometObject.attribute_map)

    def __init__(self, schema='FN', schema_version=None, name=None, modules=None, module_index=None, executables=None, *args, **kwargs):  # noqa: E501
        """GrometFNModuleCollection - a model defined in Swagger"""  # noqa: E501
        self._schema = None
        self._schema_version = None
        self._name = None
        self._modules = None
        self._module_index = None
        self._executables = None
        self.discriminator = None
        if schema is not None:
            self.schema = schema
        if schema_version is not None:
            self.schema_version = schema_version
        if name is not None:
            self.name = name
        if modules is not None:
            self.modules = modules
        if module_index is not None:
            self.module_index = module_index
        if executables is not None:
            self.executables = executables
        GrometObject.__init__(self, *args, **kwargs)

    @property
    def schema(self):
        """Gets the schema of this GrometFNModuleCollection.  # noqa: E501


        :return: The schema of this GrometFNModuleCollection.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this GrometFNModuleCollection.


        :param schema: The schema of this GrometFNModuleCollection.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def schema_version(self):
        """Gets the schema_version of this GrometFNModuleCollection.  # noqa: E501


        :return: The schema_version of this GrometFNModuleCollection.  # noqa: E501
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this GrometFNModuleCollection.


        :param schema_version: The schema_version of this GrometFNModuleCollection.  # noqa: E501
        :type: str
        """

        self._schema_version = schema_version

    @property
    def name(self):
        """Gets the name of this GrometFNModuleCollection.  # noqa: E501

        The name of the collection, e.g., the name of the multi-module system.   # noqa: E501

        :return: The name of this GrometFNModuleCollection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GrometFNModuleCollection.

        The name of the collection, e.g., the name of the multi-module system.   # noqa: E501

        :param name: The name of this GrometFNModuleCollection.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def modules(self):
        """Gets the modules of this GrometFNModuleCollection.  # noqa: E501


        :return: The modules of this GrometFNModuleCollection.  # noqa: E501
        :rtype: list[GrometFNModule]
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this GrometFNModuleCollection.


        :param modules: The modules of this GrometFNModuleCollection.  # noqa: E501
        :type: list[GrometFNModule]
        """

        self._modules = modules

    @property
    def module_index(self):
        """Gets the module_index of this GrometFNModuleCollection.  # noqa: E501

        The index of module path names (strings) with the index to the GrometFNModule in the modules table. Because this is a bijection, the module path names are represented as an array of strings, where the order in the array is the index into the modules table.   # noqa: E501

        :return: The module_index of this GrometFNModuleCollection.  # noqa: E501
        :rtype: list[str]
        """
        return self._module_index

    @module_index.setter
    def module_index(self, module_index):
        """Sets the module_index of this GrometFNModuleCollection.

        The index of module path names (strings) with the index to the GrometFNModule in the modules table. Because this is a bijection, the module path names are represented as an array of strings, where the order in the array is the index into the modules table.   # noqa: E501

        :param module_index: The module_index of this GrometFNModuleCollection.  # noqa: E501
        :type: list[str]
        """

        self._module_index = module_index

    @property
    def executables(self):
        """Gets the executables of this GrometFNModuleCollection.  # noqa: E501

        Array of indices into the modules table to denote GrometFNModules that have a main function (and are executable).   # noqa: E501

        :return: The executables of this GrometFNModuleCollection.  # noqa: E501
        :rtype: list[int]
        """
        return self._executables

    @executables.setter
    def executables(self, executables):
        """Sets the executables of this GrometFNModuleCollection.

        Array of indices into the modules table to denote GrometFNModules that have a main function (and are executable).   # noqa: E501

        :param executables: The executables of this GrometFNModuleCollection.  # noqa: E501
        :type: list[int]
        """

        self._executables = executables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrometFNModuleCollection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrometFNModuleCollection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
